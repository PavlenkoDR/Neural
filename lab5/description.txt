Для начала запустите базовую версию программы code.ipynb.

Запишите точность работы сети после обучения на тестовых данных.

Проанализируйте точность на проверочной выборке в процессе обучения. Она указывается после заголовка val_acc. Началось ли переобучение нейронной сети?

Экспериментируем с гиперпараметрами обучения.
Мы попытаемся улучшить качество обучения сети путем изменения гиперпараметров. Для этого проведем серию экспериментов, в каждом из которых будем менять один из гиперпараметров, и анализировать, как изменилось качество работы сети.

Изменение параметров классификатора. Попробуйте изменить параметры нового классификатора, который мы добавили к модели VGG16:

 # Добавляем в модель новый классификатор
 model.add(Flatten())
 model.add(Dense(256))
 model.add(Activation('relu'))
 model.add(Dropout(0.5))
 model.add(Dense(1))
 model.add(Activation('sigmoid'))

Измените количество нейронов в первом полносвязном (Dense) слое, попробуйте добавить еще один полносвязный слой в классификатор (или несколько полносвязных слоев) с разным количеством нейронов. Оцените, как это влияет на качество распознавания.

Оцените роль слоя регуляризации Dropout. Попробуйте убрать его и сети и посмотреть, что произойдет. Попробуйте изменить значение параметра слоя Dropout с 0.5 на другое и посмотреть, как это влияет на качество распознавания.

Другие предварительно обученные сети. Попробуйте вместо VGG16 использовать другую предварительно обученную нейронную сеть. Список доступных сетей есть на странице Keras Applications (https://keras.io/applications/). Например, для использования сети Google Inceptionv3:

 # Подключаем модуль с сетью Inceptionv3
 from tensorflow.python.keras.applications import InceptionV3
 ...
 # Загружаем предварительно обученную нейронную сеть Inceptionv3
 inception_net = InceptionV3(weights='imagenet', include_top=False, 
                             input_shape=(150, 150, 3))
 # "Замораживаем" веса предварительно обученной нейронной сети Inceptionv3
 inception_net.trainable = False
 ...
 # Создаем составную нейронную сеть на основе Inceptionv3
 # Создаем последовательную модель Keras
 model = Sequential()
 # Добавляем в модель сеть Inceptionv3 вместо слоя
 model.add(inception_net)
 ...

Оцените качество работы сети на основе Inceptionv3 и сравните с качеством сети VGG16. Попробуйте также использовать сети ResNet50 и InceptionResNetV2. Исследуйте качество работы других предварительно обученных нейронных сетей, входящих в Keras.

С сетями Inceptionv3, ResNet50 и другими, более новыми, вы можете в классификаторе вместо слоя Flatten использовать слой GlobalAveragePooling2D. Оцените, как это влияет на качество обучения.

Время обучения сети. Сети Inceptionv3 и ResNet50 обеспечивают лучшее качество распознавания, но содержат гораздо больше слоев, чем сеть VGG16. У ResNet50, как понятно из названия, 50 слоев, у Inceptionv3 - 159 слоев. Сеть InceptionResNetV2 содержит 578 слоев. Чем большое слоев в сети, тем больше времени требуется для ее дообучения. Постарайтесь подобрать компромиссный вариант предварительно обученной нейронной сети с учетом точности распознавания и времени обучения.

Выбираем лучшие гиперпараметры.
Создайте сеть с лучшими значениями всех гиперпараметров обучения, которые вы определили на предыдущем шаге. Учитывайте не только точность работы, но и время обучения сети. Что можно сделать, чтобы еще больше увеличить точность?